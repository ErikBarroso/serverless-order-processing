#!/bin/bash

# Script orquestrador para deploy completo

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"

# Cores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Vari√°veis
ENVIRONMENT="${1:-staging}"
DEPLOY_INFRASTRUCTURE="${DEPLOY_INFRASTRUCTURE:-true}"
DEPLOY_API="${DEPLOY_API:-true}"
DEPLOY_LAMBDAS="${DEPLOY_LAMBDAS:-true}"

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo -e "${BLUE}üöÄ Deploy Completo - Serverless Order Processing${NC}"
    echo ""
    echo -e "${YELLOW}Uso:${NC} ./deploy-all.sh [ambiente] [op√ß√µes]"
    echo ""
    echo -e "${YELLOW}Ambientes:${NC}"
    echo -e "  ${GREEN}staging${NC}     - Ambiente de staging (padr√£o)"
    echo -e "  ${GREEN}production${NC}  - Ambiente de produ√ß√£o"
    echo ""
    echo -e "${YELLOW}Vari√°veis de ambiente:${NC}"
    echo -e "  ${GREEN}DEPLOY_INFRASTRUCTURE${NC}=true/false  - Deploy da infraestrutura"
    echo -e "  ${GREEN}DEPLOY_API${NC}=true/false             - Deploy da API"
    echo -e "  ${GREEN}DEPLOY_LAMBDAS${NC}=true/false         - Deploy das Lambdas"
    echo ""
    echo -e "${YELLOW}Exemplos:${NC}"
    echo -e "  ./deploy-all.sh staging"
    echo -e "  ./deploy-all.sh production"
    echo -e "  DEPLOY_INFRASTRUCTURE=false ./deploy-all.sh staging"
}

# Fun√ß√£o para validar ambiente
validate_environment() {
    if [[ "$ENVIRONMENT" != "staging" && "$ENVIRONMENT" != "production" ]]; then
        echo -e "${RED}‚ùå Ambiente inv√°lido: $ENVIRONMENT${NC}"
        echo -e "${YELLOW}Ambientes v√°lidos: staging, production${NC}"
        exit 1
    fi
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    echo -e "${BLUE}üîç Verificando depend√™ncias...${NC}"
    
    local deps=("aws" "docker" "npm" "zip")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing+=("$dep")
        fi
    done
    
    if [ ${#missing[@]} -ne 0 ]; then
        echo -e "${RED}‚ùå Depend√™ncias n√£o encontradas: ${missing[*]}${NC}"
        exit 1
    fi
    
    # Verificar se AWS CLI est√° configurado
    if ! aws sts get-caller-identity &>/dev/null; then
        echo -e "${RED}‚ùå AWS CLI n√£o est√° configurado${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Todas as depend√™ncias OK${NC}"
}

# Fun√ß√£o para build do projeto
build_project() {
    echo -e "${BLUE}üî® Building projeto...${NC}"
    cd "$PROJECT_ROOT"
    
    echo -e "${BLUE}  üì¶ Instalando depend√™ncias...${NC}"
    npm ci
    
    echo -e "${BLUE}  üî® Compilando TypeScript...${NC}"
    npm run build
    
    echo -e "${GREEN}‚úÖ Build conclu√≠do${NC}"
}

# Fun√ß√£o para executar testes
run_tests() {
    echo -e "${BLUE}üß™ Executando testes...${NC}"
    cd "$PROJECT_ROOT"
    
    npm test
    
    echo -e "${GREEN}‚úÖ Testes passaram${NC}"
}

# Fun√ß√£o para deploy da infraestrutura
deploy_infrastructure() {
    if [[ "$DEPLOY_INFRASTRUCTURE" == "true" ]]; then
        echo -e "${PURPLE}üèóÔ∏è Deploy da infraestrutura...${NC}"
        
        ENVIRONMENT="$ENVIRONMENT" "$SCRIPT_DIR/deploy-infrastructure.sh"
        
        echo -e "${GREEN}‚úÖ Infraestrutura deployada${NC}"
    else
        echo -e "${YELLOW}‚è≠Ô∏è Skip deploy da infraestrutura${NC}"
    fi
}

# Fun√ß√£o para deploy da API
deploy_api() {
    if [[ "$DEPLOY_API" == "true" ]]; then
        echo -e "${PURPLE}üöÄ Deploy da API...${NC}"
        
        ENVIRONMENT="$ENVIRONMENT" "$SCRIPT_DIR/deploy.sh"
        
        echo -e "${GREEN}‚úÖ API deployada${NC}"
    else
        echo -e "${YELLOW}‚è≠Ô∏è Skip deploy da API${NC}"
    fi
}

# Fun√ß√£o para deploy das Lambdas
deploy_lambdas() {
    if [[ "$DEPLOY_LAMBDAS" == "true" ]]; then
        echo -e "${PURPLE}‚ö° Deploy das Lambdas...${NC}"
        
        ENVIRONMENT="$ENVIRONMENT" "$SCRIPT_DIR/deploy-lambda.sh"
        
        echo -e "${GREEN}‚úÖ Lambdas deployadas${NC}"
    else
        echo -e "${YELLOW}‚è≠Ô∏è Skip deploy das Lambdas${NC}"
    fi
}

# Fun√ß√£o para verificar sa√∫de dos servi√ßos
health_check() {
    echo -e "${BLUE}üè• Verificando sa√∫de dos servi√ßos...${NC}"
    
    # TODO: Implementar health checks espec√≠ficos
    # - API endpoint
    # - Lambda functions
    # - DynamoDB tables
    
    echo -e "${GREEN}‚úÖ Health check conclu√≠do${NC}"
}

# Fun√ß√£o principal
main() {
    echo -e "${PURPLE}üöÄ Iniciando deploy completo...${NC}"
    echo -e "${YELLOW}Environment: $ENVIRONMENT${NC}"
    echo -e "${YELLOW}Infrastructure: $DEPLOY_INFRASTRUCTURE${NC}"
    echo -e "${YELLOW}API: $DEPLOY_API${NC}"
    echo -e "${YELLOW}Lambdas: $DEPLOY_LAMBDAS${NC}"
    echo ""
    
    check_dependencies
    validate_environment
    
    build_project
    run_tests
    
    deploy_infrastructure
    deploy_api
    deploy_lambdas
    
    health_check
    
    echo ""
    echo -e "${GREEN}üéâ Deploy completo conclu√≠do com sucesso!${NC}"
    echo -e "${YELLOW}Environment: $ENVIRONMENT${NC}"
    echo -e "${YELLOW}Timestamp: $(date)${NC}"
}

# Verificar argumentos
if [[ "$1" == "help" || "$1" == "--help" || "$1" == "-h" ]]; then
    show_help
    exit 0
fi

main "$@" 